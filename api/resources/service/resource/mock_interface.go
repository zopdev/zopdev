// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_interface.go -package=resource
//

// Package resource is a generated GoMock package.
package resource

import (
	reflect "reflect"

	client "github.com/zopdev/zopdev/api/resources/client"
	models "github.com/zopdev/zopdev/api/resources/models"
	gomock "go.uber.org/mock/gomock"
	gofr "gofr.dev/pkg/gofr"
)

// MockCloudResourceProvider is a mock of CloudResourceProvider interface.
type MockCloudResourceProvider struct {
	ctrl     *gomock.Controller
	recorder *MockCloudResourceProviderMockRecorder
	isgomock struct{}
}

// MockCloudResourceProviderMockRecorder is the mock recorder for MockCloudResourceProvider.
type MockCloudResourceProviderMockRecorder struct {
	mock *MockCloudResourceProvider
}

// NewMockCloudResourceProvider creates a new mock instance.
func NewMockCloudResourceProvider(ctrl *gomock.Controller) *MockCloudResourceProvider {
	mock := &MockCloudResourceProvider{ctrl: ctrl}
	mock.recorder = &MockCloudResourceProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudResourceProvider) EXPECT() *MockCloudResourceProviderMockRecorder {
	return m.recorder
}

// ListResources mocks base method.
func (m *MockCloudResourceProvider) ListResources(ctx *gofr.Context, creds any, filter models.ResourceFilter) ([]models.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", ctx, creds, filter)
	ret0, _ := ret[0].([]models.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockCloudResourceProviderMockRecorder) ListResources(ctx, creds, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockCloudResourceProvider)(nil).ListResources), ctx, creds, filter)
}

// StartResource mocks base method.
func (m *MockCloudResourceProvider) StartResource(ctx *gofr.Context, creds any, resource *models.Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartResource", ctx, creds, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartResource indicates an expected call of StartResource.
func (mr *MockCloudResourceProviderMockRecorder) StartResource(ctx, creds, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartResource", reflect.TypeOf((*MockCloudResourceProvider)(nil).StartResource), ctx, creds, resource)
}

// StopResource mocks base method.
func (m *MockCloudResourceProvider) StopResource(ctx *gofr.Context, creds any, resource *models.Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopResource", ctx, creds, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// StopResource indicates an expected call of StopResource.
func (mr *MockCloudResourceProviderMockRecorder) StopResource(ctx, creds, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopResource", reflect.TypeOf((*MockCloudResourceProvider)(nil).StopResource), ctx, creds, resource)
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
	isgomock struct{}
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// GetAllCloudAccounts mocks base method.
func (m *MockHTTPClient) GetAllCloudAccounts(ctx *gofr.Context) ([]client.CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCloudAccounts", ctx)
	ret0, _ := ret[0].([]client.CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCloudAccounts indicates an expected call of GetAllCloudAccounts.
func (mr *MockHTTPClientMockRecorder) GetAllCloudAccounts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCloudAccounts", reflect.TypeOf((*MockHTTPClient)(nil).GetAllCloudAccounts), ctx)
}

// GetCloudCredentials mocks base method.
func (m *MockHTTPClient) GetCloudCredentials(ctx *gofr.Context, cloudAccID int64) (*client.CloudAccount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudCredentials", ctx, cloudAccID)
	ret0, _ := ret[0].(*client.CloudAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudCredentials indicates an expected call of GetCloudCredentials.
func (mr *MockHTTPClientMockRecorder) GetCloudCredentials(ctx, cloudAccID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudCredentials", reflect.TypeOf((*MockHTTPClient)(nil).GetCloudCredentials), ctx, cloudAccID)
}

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetResourceByID mocks base method.
func (m *MockStore) GetResourceByID(ctx *gofr.Context, id int64) (*models.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceByID", ctx, id)
	ret0, _ := ret[0].(*models.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceByID indicates an expected call of GetResourceByID.
func (mr *MockStoreMockRecorder) GetResourceByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceByID", reflect.TypeOf((*MockStore)(nil).GetResourceByID), ctx, id)
}

// GetResources mocks base method.
func (m *MockStore) GetResources(ctx *gofr.Context, cloudAccountID int64, resourceType []string) ([]models.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResources", ctx, cloudAccountID, resourceType)
	ret0, _ := ret[0].([]models.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResources indicates an expected call of GetResources.
func (mr *MockStoreMockRecorder) GetResources(ctx, cloudAccountID, resourceType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockStore)(nil).GetResources), ctx, cloudAccountID, resourceType)
}

// InsertResource mocks base method.
func (m *MockStore) InsertResource(ctx *gofr.Context, resources *models.Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertResource", ctx, resources)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertResource indicates an expected call of InsertResource.
func (mr *MockStoreMockRecorder) InsertResource(ctx, resources any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertResource", reflect.TypeOf((*MockStore)(nil).InsertResource), ctx, resources)
}

// RemoveResource mocks base method.
func (m *MockStore) RemoveResource(ctx *gofr.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveResource", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveResource indicates an expected call of RemoveResource.
func (mr *MockStoreMockRecorder) RemoveResource(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveResource", reflect.TypeOf((*MockStore)(nil).RemoveResource), ctx, id)
}

// UpdateStatus mocks base method.
func (m *MockStore) UpdateStatus(ctx *gofr.Context, status string, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", ctx, status, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockStoreMockRecorder) UpdateStatus(ctx, status, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockStore)(nil).UpdateStatus), ctx, status, id)
}
